 
{   "name":"metaCore",
    "manufacturer":"JAC459",
    "type":"MUSICPLAYER",
    "version":5,
    "variables":{
        "ToInitiate":false
    },
    "discover":{
        "welcomeheadertext":"metaCore",
        "welcomedescription":"Core Driver to manage your meta platform \n by JAC459",
        "command":{"type":"static", "command":".", "queryresult":"$.*"}        
    },
    "template":{
    "dynamicname":"DYNAMIK_INST_START metaCore DYNAMIK_INST_END",
    "dynamicid":  "DYNAMIK_INST_START metaCore DYNAMIK_INST_END",
    "variables":{
        "Manifest":   "https://raw.githubusercontent.com/jac459/meta-core/main/drivers.manifest",
        "IconBaseUrl":"https://raw.githubusercontent.com/jac459/meta-core/main/pics",
        "ActivatedLib":"./active",
        "CoreLibrary": "./library",
        "LibraryDrivers":"[]",
        "LibraryDataStore":"[]",
        "ActiveDrivers":"[]",
        "LocalLibraryDrivers":"[]",
        "CurrentDriver":"",
        "IsUserDefined":"",
        "BrainIP":"",
        "RoomKey":"",
        "DeviceKey":"",
        "TriggerKey":"",
        "CurrentNetworkDevice":"",
        "LibraryUpdated":false,
        "pm2Process":""
    },
    "persistedvariables":{
        "pm2DisableLoggingMeta":true,
        "pm2DisableLoggingNodeRed":true,
        "pm2DisableLoggingMosquitto":true
    },
    "buttons":{          
        "POWER ON": {"type":"static", "command":"","queryresult": "", "evaldo":[{"test":true,"then":"__SETUP0"}]},
        "__SETUP0": {"type":"cli", "command":"DYNAMIK let Manif = \"$Manifest\".split(\"/\")[\"$Manifest\".split(\"/\").length-1]; \"curl -f --connect-timeout 1 $Manifest -o \" + Manif + \" || echo \\\"err\\\" \" ", "queryresult":"", "evalwrite":[{"variable":"LibraryUpdated", "value":"DYNAMIK \"$Result\"==\"err\" ? false : true "}], "evaldo":[{"test":true,"then":"__SETUP1"}]},
        "__SETUP1": {"type":"cli", "command":"DYNAMIK let Manif = \"$Manifest\".split(\"/\")[\"$Manifest\".split(\"/\").length-1]; \"cat \" + Manif + \" || echo \\\"err\\\" \" ","queryresult": "", "evalwrite":[{"variable":"LibraryDrivers", "value":"DYNAMIK \"$Result\"==\"err\" ? undefined : ($LibraryUpdated ? \"$Result\".replace(/(\\r\\n|\\n|\\r)/gm, \"\") : undefined )"}], "evaldo":[{"test":true,"then":"__SETUP2"}]},
        "__SETUP2": {"type":"static", "command":"$LibraryDrivers","queryresult": "$.drivers", "evalwrite":[{"variable":"LibraryDrivers", "value":"$Result"}], "evaldo":[{"test":true,"then":"__ENRICHLIBRARY0"}]},
        "__ENRICHLIBRARY0": {"type":"cli", "command":"ls -1 $ActivatedLib\/*.json | xargs -n 1 basename| sed -e \"s/\\.json$\/\/\"","queryresult": ["/(.*)./gm"], "evalwrite":[{"variable":"ActiveDrivers",      "value":"DYNAMIK let src = JSON.parse(\"$Result\"); let dest = []; if (src != undefined) { src.forEach((item)=>{if (!item.endsWith(\"-DataStore\")) {dest.push(item);}}) }; JSON.stringify(dest);"}, {"variable":"LibraryDataStore","value":"DYNAMIK let src = JSON.parse(\"$Result\"); let dest = []; src.forEach((item)=>{if (item.endsWith(\"-DataStore\")) {dest.push(item);}}); JSON.stringify(dest);"}], "evaldo":[{"test":true,"then":"__ENRICHLIBRARY1"}]},
        "__ENRICHLIBRARY1": {"type":"cli", "command":"ls -1 $CoreLibrary\/*.json  | xargs -n 1 basename| sed -e \"s/\\.json$\/\/\"","queryresult": ["/(.*)./gm"], "evalwrite":[{"variable":"LocalLibraryDrivers","value":"DYNAMIK let src = JSON.parse(\"$Result\"); let dest = []; if (src != undefined) { src.forEach((item)=>{if (!item.endsWith(\"-DataStore\")) {dest.push(item);}}) }; JSON.stringify(dest);"}], "evaldo":[{"test":true,"then":"__ENRICHLIBRARY2"}]},
        "__ENRICHLIBRARY2": {"type":"static", "command":"$LibraryDrivers","queryresult": "", "evalwrite":[{"variable":"LibraryDrivers", "value":"DYNAMIK let ld = $LibraryDrivers; if (ld != undefined) { ld.forEach((d) => { let t = d.driverLocation.split(\"\/\"); let u = t[t.length-1].split(\".json\")[0]; d.filename = u;if ($ActiveDrivers.findIndex((ad)      =>{return ad == u})>=0) {d.active  = true} else {d.active  = false}}) }; JSON.stringify(ld);"}], "evaldo":[{"test":true,"then":"__ENRICHLIBRARY3"}]},
        "__ENRICHLIBRARY3": {"type":"static", "command":"$LibraryDrivers","queryresult": "", "evalwrite":[{"variable":"LibraryDrivers", "value":"DYNAMIK let ld = $LibraryDrivers; if (ld != undefined) { ld.forEach((d) => { let t = d.driverLocation.split(\"\/\"); let u = t[t.length-1].split(\".json\")[0]; d.filename = u;if ($LocalLibraryDrivers.findIndex((ad)=>{return ad == u})>=0) {d.library = true} else {d.library = false}}) }; JSON.stringify(ld);"}], "evaldo":[{"test":true,"then":"__ENRICHLIBRARY4"}]},
        "__ENRICHLIBRARY4": {"type":"static", "command":"$LibraryDrivers","queryresult": "", "evalwrite":[{"variable":"LibraryDrivers", "value":"DYNAMIK let ld = $LibraryDrivers; ld == undefined ? ld=[] : ld; $ActiveDrivers.forEach((ad)      =>{if (ld.findIndex((driv) => {return driv.filename == ad})<0) {ld.push({\"name\":ad, \"author\":\"Unknown\",\"description\":\"No Description. This is a User defined Driver.\",\"version\":\"N/A\",\"driverLocation\":\"\",\"iconLocation\":\"$IconBaseUrl/device.jpg\",\"filename\":ad,\"library\":true,\"active\":true, \"IsUserDefined\":true})} }); JSON.stringify(ld)"}], "evaldo":[{"test":true,"then":"__ENRICHLIBRARY5"}]},
        "__ENRICHLIBRARY5": {"type":"static", "command":"$LibraryDrivers","queryresult": "", "evalwrite":[{"variable":"LibraryDrivers", "value":"DYNAMIK let ld = $LibraryDrivers; ld == undefined ? ld=[] : ld; $LocalLibraryDrivers.forEach((ad)=>{if (ld.findIndex((driv) => {return driv.filename == ad})<0) {ld.push({\"name\":ad, \"author\":\"Unknown\",\"description\":\"No Description. This is a User defined Driver.\",\"version\":\"N/A\",\"driverLocation\":\"\",\"iconLocation\":\"$IconBaseUrl/device.jpg\",\"filename\":ad,\"library\":true,\"active\":false,\"IsUserDefined\":true})} }); JSON.stringify(ld)"}], "evaldo":[{"test":true,"then":"__ENRICHLIBRARY6"}]},
        "__ENRICHLIBRARY6": {"type":"static", "command":"$LibraryDrivers","queryresult": "", "evalwrite":[{"variable":"LibraryDrivers", "value":"DYNAMIK let ld = $LibraryDrivers; ld.forEach((d) => { let u = d.filename; if ($LibraryDataStore.findIndex((ds)=>{return ds.split(\"-DataStore\")[0] == u})>=0) {d.datastore = true} else {d.datastore=false}}); JSON.stringify(ld);"}]},
        "POWER OFF": {"type":"static", "command":"."}
    },
    "directories":{
        "Settings": {"label":"Settings","feeders": {
            "Settings":{"label":"Settings","commandset": [{
                "type":"static", "command":"{}",
                "itemtype":"tile",
                "itemimage":"$IconBaseUrl/meta.jpg",
                "itemaction":""
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/list.jpg",
                "itemname":  "Library",
                "itemlabel": "Driver Library",
                "evalnext":[{"test":true, "then":"Library", "or":""}]
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/recipe.jpg",
                "itemname":  "Devices and Actions",
                "itemlabel": "Browse all installed Devices",
                "evalnext":[{"test":true, "then":"Brain", "or":""}]
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/settings.jpg",
                "itemname":  "Global Settings",
                "itemlabel": "Manage the .meta",
                "evalnext":[{"test":true, "then":"Manage", "or":""}]
                }
            ]},
            "Library":{"label":"Drivers list", "commandset": [{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"DYNAMIK $LibraryUpdated ? \"Driver Library successfully updated!\" : \"Loading online Library failed! Local Drivers:\" ",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":"$LibraryDrivers","queryresult": "$.*",
                "itemimage":"DYNAMIK JSON.parse(\"$Result\").iconLocation",
                "itemname": "DYNAMIK JSON.parse(\"$Result\").name + \" by \" + JSON.parse(\"$Result\").author",
                "itemlabel":"DYNAMIK JSON.parse(\"$Result\").active ? \">> DRIVER ACTIVE <<\" : (JSON.parse(\"$Result\").library ? \"Not active\" : \"Available for Download\") ",
                "evalwrite":[
                    {"variable":"CurrentDriver","value":"DYNAMIK JSON.parse(\"$Result\").filename"},
                    {"variable":"IsUserDefined","value":"DYNAMIK JSON.parse(\"$Result\").IsUserDefined ? true : false"}
                ],
                "evalnext":[{"test":true, "then":"LibraryChoice", "or":""}]
                }
            ]},
            "LibraryChoice":{"label":"", "commandset": [{
                "type":"static", "command":"DYNAMIK let ld = $LibraryDrivers; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"});", 
                "itemimage": "DYNAMIK JSON.parse(\"$Result\").iconLocation;",
                "itemname":  "DYNAMIK JSON.parse(\"$Result\").name",
                "itemlabel": "DYNAMIK \"Version: \" + JSON.parse(\"$Result\").version + \" | by: \"+JSON.parse(\"$Result\").author",
                "itemaction":"."
                },{
                "type":"static", "command":"DYNAMIK let ld = $LibraryDrivers; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"});",
                "itemtype":  "info",
                "itemname":  "Click here for more Info and Readme:",
                "itemlabel": "DYNAMIK JSON.parse(\"$Result\").description"
                },{
                "type":"static", "command":"DYNAMIK let ld = $LibraryDrivers; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"});",
                "itemimage": "DYNAMIK \"$IconBaseUrl/\" + (JSON.parse(\"$Result\").active ? \"check_on.png\" : \"check_off.png\" )",
                "itemname":  "DYNAMIK JSON.parse(\"$Result\").active ? \"Deactivate Driver\" : \"Activate Driver\"",
                "itemlabel": "DYNAMIK JSON.parse(\"$Result\").IsUserDefined ? \"\" : (JSON.parse(\"$Result\").library ? (JSON.parse(\"$Result\").active?\"\":\"Restart meta after Activation!\")  :\"Download the Driver first!\") ",
                "itemaction":"DYNAMIK JSON.parse(\"$Result\").library || JSON.parse(\"$Result\").active ? \"ActivateAction\" : \".\" ",
                "itemUI":    "DYNAMIK JSON.parse(\"$Result\").library || JSON.parse(\"$Result\").active ? \"reload\" : false ",
                "evalwrite":[{"variable":"LibraryDrivers","value":"DYNAMIK let ld = $LibraryDrivers; let cd = ld.find((driv) => {return driv.filename == \"$CurrentDriver\"});cd.active = JSON.parse(\"$Result\").library || JSON.parse(\"$Result\").active ? !cd.active : cd.active; JSON.stringify(ld);"}]
                },{
                "type":"static", "command":"DYNAMIK let ld = $LibraryDrivers; if ($IsUserDefined != true) { ld.find((driv) => {return driv.filename == \"$CurrentDriver\"}) };",
                "itemimage": "$IconBaseUrl/download.jpg",
                "itemname":  "DYNAMIK JSON.parse(\"$Result\").library ? \"Update this Driver\" : \"Download this Driver\" ",
                "itemlabel": "DYNAMIK JSON.parse(\"$Result\").library ? (JSON.parse(\"$Result\").updated==\"err\"?\"Downloading Driver failed!\": (JSON.parse(\"$Result\").updated?\"Restart meta after Updating!\":\"Download latest Verison\") ) : \"Download Driver to local Library\" ",
                "itemaction":"UpdateAction",
                "itemUI":    "reload",
                "evalwrite":[{"variable":"LibraryDrivers","value":"DYNAMIK let ld = $LibraryDrivers; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"}).library = true; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"}).updated = (JSON.parse(\"$Result\").library); JSON.stringify(ld);"}]
                },{
                "type":"static", "command":"DYNAMIK let ld = $LibraryDrivers; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"});",
                "itemimage": "$IconBaseUrl/warning.jpg",
                "itemname":  "DYNAMIK JSON.parse(\"$Result\").datastore ? \"Delete DataStore\" : \"No DataStore to delete\" ",
                "itemlabel": "Reset Driver to Factory Defaults",
                "itemaction":"DYNAMIK JSON.parse(\"$Result\").datastore ? \"DatastoreAction\" : \".\" ",
                "itemUI" :   "DYNAMIK JSON.parse(\"$Result\").datastore ? \"reload\" : false "
                }
            ]},
            "Brain":{"label":"Brain list","commandset": [{
                "type":"mDNS", "command":"", "queryresult":["$.[?(@.port==3000)][?(@property === \"short\" && @.match(/_neeo._tcp.local$/i))]^"],
                "itemimage":"$IconBaseUrl/brain.jpg",
                "itemname": "DYNAMIK  JSON.parse(\"$Result\").name.split(\"._neeo._tcp.local\")[0]",
                "itemlabel":"DYNAMIK  \"NEEO Brain @\" + JSON.parse(\"$Result\").ip",
                "evalwrite":[{"variable":"BrainIP","value":"DYNAMIK JSON.parse(\"$Result\").ip"}],
                "evalnext":[{"test":true, "then":"Rooms", "or":"Brain"}]
                }
            ]},
            "Rooms":{"label":"Rooms list","commandset": [{
                "type":"http-get", "command":"http://$BrainIP:3000/v1/projects/home/rooms/", "queryresult":"$.*",
                "itemimage":"$IconBaseUrl/room.jpg",
                "itemname": "DYNAMIK JSON.parse(\"$Result\").name",
                "itemlabel":"Room",
                "evalwrite":[{"variable":"RoomKey","value":"DYNAMIK JSON.parse(\"$Result\").key"}],
                "evalnext":[{"test":true, "then":"Devices", "or":"Rooms"}]
                }
            ]},
            "Devices":{"label":"Devices list","commandset": [{
                "type":"http-get", "command":"http://$BrainIP:3000/v1/projects/home/rooms/$RoomKey/devices", "queryresult":"$.*",
                "itemimage":"$IconBaseUrl/device.jpg",
                "itemname": "DYNAMIK JSON.parse(\"$Result\").name",
                "itemlabel":"Device",
                "evalwrite":[{"variable":"DeviceKey","value":"DYNAMIK JSON.parse(\"$Result\").key"}],
                "evalnext":[{"test":true, "then":"Macros", "or":"Devices"}]
                }
            ]},
            "Macros":{"label":"Macros list", "commandset": [{
                "type":"http-get", "command":"http://$BrainIP:3000/v1/projects/home/rooms/$RoomKey/devices/$DeviceKey/macros", "queryresult":"$.*",
                "itemimage": "$IconBaseUrl/recipe.jpg",
                "itemname":  "DYNAMIK JSON.parse(\"$Result\").name",
                "itemlabel": "Button",
                "itemaction":"ACTION_ActivateMacro",
                "evalwrite":[{"variable":"TriggerKey","value":"DYNAMIK JSON.parse(\"$Result\").key"}]
                }
            ]},
            "Manage":{"label":"Manage the Meta","commandset": [{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/meta.jpg",
                "itemname":  "Restart meta",
                "itemlabel": "Restart the meta instance",
                "evalnext":[{"test":true, "then":"Restart Meta", "or":""}]
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/Node-red-icon.jpg",
                "itemname":  "Restart Node-Red",
                "itemlabel": "Restart the Node-Red instance",
                "evalnext":[{"test":true, "then":"Restart Node-Red", "or":""}]
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/mosquitto-mono.jpg",
                "itemname":  "Restart MQTT",
                "itemlabel": "Restart the Mosquitto instance",																														
                "evalnext":[{"test":true, "then":"Restart Mosquitto", "or":""}]
                },{
                "type":"static", "command":".", "queryresult":"$.*",
                "itemimage": "$IconBaseUrl/updateMeta.jpg",
                "itemname":  "Update meta",
                "itemlabel": "Download latest Release",
                "evalnext":[{"test":true, "then":"Update meta", "or":""}]
                },{
                "type":"static", "command":".", "queryresult":"$.*",
                "itemimage": "$IconBaseUrl/scans.jpg",
                "itemname":  "Show Result of Network Scan",
                "itemlabel": "Browse resultsDiscovery.json",
                "evalnext":[{"test":true, "then":"Scan", "or":""}]
                }              
            ]},
            "Restart Meta":{"label":"Restart Meta","commandset": [{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"Do you really want to restart meta?",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/meta.jpg",
                "itemname":  "Restart meta now!",
                "itemlabel": "UI will be unresponsive for 1 min!",
                "itemaction":"RestartMeta",
                "itemUI" :   "reload"
                },{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"More options:",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":".",
                "itemimage":"DYNAMIK (\"$IconBaseUrl/\"+\"check_\" + ($pm2DisableLoggingMeta ?\"on.png\":\"off.png\") ).replace(/ /g, \"%20\") ",
                "itemname": "Disable logging in pm2",
                "itemlabel":"Will be applied at next restart!",
                "itemUI":   "reload",
                "evalwrite":[{"variable":"pm2DisableLoggingMeta", "value":"DYNAMIK $pm2DisableLoggingMeta ? false : true"}],
                "itemaction":"Persist"
                },{
                "type":"static", "command":".",
                "itemimage":"$IconBaseUrl/delete.jpg",
                "itemname": "Delete pm2 logs",
                "itemlabel":"Flush the logs for this process!",
                "itemUI":   "reload",
                "evalwrite":[{"variable":"pm2Process", "value":"meta"}],
                "itemaction":"pm2Flush"
                }
            ]},
            "Restart Node-Red":{"label":"Restart Node-Red","commandset": [{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"Do you really want to restart Node-Red?",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/meta.jpg",
                "itemname":  "Restart Node-Red now!",
                "itemlabel": "Restart the Node-Red instance",
                "itemaction":"RestartNodeRed",
                "itemUI" :   "reload"
                },{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"More options:",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":".",
                "itemimage":"DYNAMIK (\"$IconBaseUrl/\"+\"check_\" + ($pm2DisableLoggingNodeRed ?\"on.png\":\"off.png\") ).replace(/ /g, \"%20\") ",
                "itemname": "Disable logging in pm2",
                "itemlabel":"Will be applied at next restart!",
                "itemUI":   "reload",
                "evalwrite":[{"variable":"pm2DisableLoggingNodeRed", "value":"DYNAMIK $pm2DisableLoggingNodeRed ? false : true"}],
                "itemaction":"Persist"
                },{
                "type":"static", "command":".",
                "itemimage":"$IconBaseUrl/delete.jpg",
                "itemname": "Delete pm2 logs",
                "itemlabel":"Flush the logs for this process!",
                "itemUI":   "reload",
                "evalwrite":[{"variable":"pm2Process", "value":"node-red"}],
                "itemaction":"pm2Flush"
                }
            ]},
            "Restart Mosquitto":{"label":"Restart Mosquitto","commandset": [{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"Do you really want to restart Mosquitto?",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/meta.jpg",
                "itemname":  "Restart Mosquitto now!",
                "itemlabel": "Restart the Mosquitto instance",
                "itemaction":"RestartMosquitto",
                "itemUI" :   "reload"
                },{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"More options:",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":".",
                "itemimage":"DYNAMIK (\"$IconBaseUrl/\"+\"check_\" + ($pm2DisableLoggingMosquitto ?\"on.png\":\"off.png\") ).replace(/ /g, \"%20\") ",
                "itemname": "Disable logging in pm2",
                "itemlabel":"Change will be applied on next restart!",
                "itemUI":   "reload",
                "evalwrite":[{"variable":"pm2DisableLoggingMosquitto", "value":"DYNAMIK $pm2DisableLoggingMosquitto ? false : true"}],
                "itemaction":"Persist"
                },{
                "type":"static", "command":".",
                "itemimage":"$IconBaseUrl/delete.jpg",
                "itemname": "Delete pm2 logs",
                "itemlabel":"Flush the logs for this process!",
                "itemUI":   "reload",
                "evalwrite":[{"variable":"pm2Process", "value":"mosquitto"}],
                "itemaction":"pm2Flush"
                }
            ]},
            "Update meta":{"label":"Update meta","commandset": [{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"Do you really want to update meta?",
                "itemUI":true,
                "itemaction":""
                },{
                "type":"static", "command":".", "queryresult":"$.",
                "itemimage": "$IconBaseUrl/updateMeta.jpg",
                "itemname":  "Update meta now!",
                "itemlabel": "Download latest release of meta",
                "itemaction":"UpdateMeta",
                "itemUI" :   "reload"
                },{
                "type":"static", "command":".",
                "itemtype":"button",
                "itemname":"You need to Restart meta after updating!",
                "itemUI":true,
                "itemaction":""
                }
            ]},
            "Scan":{"label":"Network Devices","commandset": [{
                "type":"mDNS", "command":"", "queryresult":"$.*",
                "itemimage":"$IconBaseUrl/meta.jpg",
                "itemname": "DYNAMIK JSON.parse(\"$Result\").ip",
                "itemlabel":"DYNAMIK JSON.parse(\"$Result\").name",
                "evalwrite":[{"variable":"CurrentNetworkDevice","value":"DYNAMIK JSON.stringify([{\"value\":\"Name : \" + JSON.parse(\"$Result\").name}, {\"value\":\"Short : \" + JSON.parse(\"$Result\").short}, {\"value\":\"IP : \" + JSON.parse(\"$Result\").ip}, {\"value\":\"Port : \" + JSON.parse(\"$Result\").port}, {\"value\":\"MAC : \" + JSON.parse(\"$Result\").mac}])"}],
                "evalnext":[{"test":true, "then":"ScanItem", "or":""}]
                }
            ]},
            "ScanItem":{"label":"Network Devices","commandset": [{
                "type":"static", "command":"$CurrentNetworkDevice", "queryresult":"$.*",
                "itemimage":"$IconBaseUrl/white.jpg",
                "itemname": "DYNAMIK JSON.parse(\"$Result\").value.split(\" : \")[0]",
                "itemlabel":"DYNAMIK JSON.parse(\"$Result\").value.split(\" : \")[1]",
                "itemaction":"."
                }
            ]},

            "ActivateAction":        {"label":"", "commandset": [{"type":"cli", "command":"DYNAMIK let cd = JSON.parse(\"$Result\");if (cd.active) {\"mv $ActivatedLib/\" + cd.filename + \".json $CoreLibrary/\"} else {\"cp $CoreLibrary/\" + cd.filename + \".json $ActivatedLib/\"}" }]},
            "UpdateAction":          {"label":"", "commandset": [{"type":"cli", "command":"DYNAMIK let cd = JSON.parse(\"$Result\");\"curl -f --connect-timeout 1 \" + cd.driverLocation + \" -o $CoreLibrary/\" + cd.filename + \".json || echo \\\"err\\\" \" + (cd.active?(\"&& cp $CoreLibrary/\" + cd.filename + \".json $ActivatedLib/\"):\"\") ", "queryresult":"","evalwrite":[{"variable":"LibraryDrivers","value":"DYNAMIK let ld = $LibraryDrivers; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"}).updated = (\"$Result\"==\"err\"?\"err\":true); JSON.stringify(ld);"}]}]},
            "DatastoreAction":       {"label":"", "commandset": [{"type":"cli", "command":"DYNAMIK let cd = JSON.parse(\"$Result\");\"rm $ActivatedLib/\" + cd.filename + \"-DataStore.json\"", "evalwrite":[{"variable":"LibraryDrivers","value":"DYNAMIK let ld = $LibraryDrivers; ld.find((driv) => {return driv.filename == \"$CurrentDriver\"}).datastore = false; JSON.stringify(ld);"}]}]},

            "ACTION_ActivateMacro":{"label":"","commandset": [{"type":"http-get", "command":"http://$BrainIP:3000/v1/projects/home/rooms/$RoomKey/devices/$DeviceKey/macros/$TriggerKey/trigger"}]},

            "Persist":         {"label":"", "commandset": [{"type":"static", "command":".", "evaldo":[{"test":true, "then":"__PERSIST", "or":""}]}]},
            "RestartMeta":     {"label":"", "commandset": [{"type":"cli", "command":"DYNAMIK $pm2DisableLoggingMeta      ? \"pm2 restart meta -o \\\"\\\/dev\\\/null\\\" -e \\\"\\\/dev\\\/null\\\" \"      : \"pm2 restart meta\"      "}]},
            "RestartNodeRed":  {"label":"", "commandset": [{"type":"cli", "command":"DYNAMIK $pm2DisableLoggingNodeRed   ? \"pm2 restart node-red -o \\\"\\\/dev\\\/null\\\" -e \\\"\\\/dev\\\/null\\\" \"  : \"pm2 restart node-red\"  "}]},
            "RestartMosquitto":{"label":"", "commandset": [{"type":"cli", "command":"DYNAMIK $pm2DisableLoggingMosquitto ? \"pm2 restart mosquitto -o \\\"\\\/dev\\\/null\\\" -e \\\"\\\/dev\\\/null\\\" \" : \"pm2 restart mosquitto\" "}]},
            "pm2Flush":        {"label":"", "commandset": [{"type":"cli", "command":"DYNAMIK \"pm2 flush $pm2Process\" "}]},
            "UpdateMeta":      {"label":"", "commandset": [{"type":"cli", "command":"wget -qO- https://raw.githubusercontent.com/jac459/meta/Release/update.sh | . ./update.sh"}]}
        }}
    }
    }
}